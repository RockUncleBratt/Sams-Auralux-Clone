// Generated by CoffeeScript 1.6.3
/*
Allow people to provide input into the game-space via a cursor.
*/


(function() {
  window.Cursor = (function() {
    Cursor.SELECTION_RADIUS_CHANGE_SPEED = 3;

    Cursor.MAX_SELECTION_RADIUS = 300;

    Cursor.MIN_SELECTION_RADIUS = 50;

    Cursor.SCROLL_SENSITIVITY = 1;

    function Cursor(player) {
      var self;
      this.player = player;
      self = this;
      this.selection_radius = 50;
      this.position = new Circle(-100, -100, this.selection_radius);
      Input.captureMousewheel(this.handleScroll, this);
      Input.captureMousemove(this.handleMove, this);
      this.handleUnitControls();
    }

    Cursor.prototype.handleScroll = function(e) {
      var direction, sensitivity;
      sensitivity = Cursor.SCROLL_SENSITIVITY;
      direction = e.deltaY > sensitivity ? 1 : e.deltaY < -sensitivity ? -1 : 0;
      return this.setSelectionRadius(this.selection_radius + (direction * Cursor.SELECTION_RADIUS_CHANGE_SPEED));
    };

    Cursor.prototype.handleMove = function(e) {
      this.position.setX(e.pageX);
      return this.position.setY(e.pageY);
    };

    Cursor.prototype.setSelectionRadius = function(radius) {
      radius = radius > Cursor.MAX_SELECTION_RADIUS ? Cursor.MAX_SELECTION_RADIUS : radius;
      radius = radius < Cursor.MIN_SELECTION_RADIUS ? Cursor.MIN_SELECTION_RADIUS : radius;
      this.selection_radius = radius;
      return this.position.setR(this.selection_radius);
    };

    Cursor.prototype.getPosition = function() {
      return this.position;
    };

    Cursor.prototype.tick = function() {
      return this.position.renderWireframe();
    };

    Cursor.prototype.handleUnitControls = function() {
      var collect_units;
      this.selected_units = new UnitCollection();
      collect_units = function() {
        var unit, _i, _len, _ref, _results;
        _ref = this.player.getUnits().getAll();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          unit = _ref[_i];
          if (unit.getPosition().intersectsWith(this.getPosition())) {
            _results.push(this.selected_units.add(unit));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      Input.captureMouseDown(function(event) {
        if (event.button === 2) {
          this.selected_units.sendTo(this.position);
          return this.selected_units.clearAll();
        } else {
          this.selected_units.clearAll();
          return collect_units.call(this);
        }
      }, this);
      return Input.captureDrag(function() {
        return collect_units.call(this);
      }, this);
    };

    return Cursor;

  })();

}).call(this);
