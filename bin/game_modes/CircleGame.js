// Generated by CoffeeScript 1.6.3
/*
Create a game based on a map.
*/


(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.CircleGame = (function(_super) {
    __extends(CircleGame, _super);

    function CircleGame() {
      _ref = CircleGame.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    CircleGame.prototype.setupGameplay = function(map) {
      var center, diameter, green_player, i, planets_each, player, radians, radius, red_player, segment_size, total_combat_planets, _i, _results;
      diameter = Math.min(window.innerHeight, window.innerWidth) - 50;
      radius = diameter / 2;
      center = new Circle(window.innerWidth / 2, window.innerHeight / 2, radius);
      this.neutral_player = new NeutralPlayer(Game.PLAYER_COLORS.BLACK);
      this.human_player = new Player(Game.PLAYER_COLORS.BLUE);
      red_player = new Player(Game.PLAYER_COLORS.RED);
      green_player = new Player(Game.PLAYER_COLORS.GREEN);
      this.players = [this.neutral_player, red_player, this.human_player, green_player];
      this.combat_players = [red_player, this.human_player, green_player];
      this.neutral_player.createPlanet(center.getX(), center.getY(), 50);
      planets_each = 4;
      total_combat_planets = this.combat_players.length * planets_each;
      segment_size = (2 * Math.PI) / total_combat_planets;
      _results = [];
      for (i = _i = 0; 0 <= total_combat_planets ? _i <= total_combat_planets : _i >= total_combat_planets; i = 0 <= total_combat_planets ? ++_i : --_i) {
        radians = segment_size * i;
        player = Math.floor(i / planets_each);
        player = i % 2 === 0 ? this.neutral_player : this.combat_players[player % this.combat_players.length];
        _results.push(player.createPlanet(radius * Math.sin(radians) + center.getX(), radius * Math.cos(radians) + center.getY(), 20));
      }
      return _results;
    };

    return CircleGame;

  })(Game);

}).call(this);
